name: Deploy to Kubernetes

on:
  push:
    branches:
      - main
      - qa
      - prd

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    env:
      ENVIRONMENT: ${{ github.ref_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: jamilusman/webserver

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Start minikube
      uses: medyagh/setup-minikube@latest

    - name: Create Kubernetes namespace
      run: |
        kubectl create namespace ${{ env.ENVIRONMENT }} || true

    - name: Build image
      run: |
        docker build -f ./Dockerfile -t nginx:latest .

    - name: Deploy to Kubernetes
      run: |
        helm upgrade --install webapp-release-${{ env.ENVIRONMENT }} ./ \
        --values ./values.yaml -f ./values-${{ env.ENVIRONMENT }}.yaml \
        -n ${{ env.ENVIRONMENT }}

    - name: Wait for Pods to be Ready
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/nginxapp --namespace ${{ env.ENVIRONMENT }}
        kubectl wait --for=condition=ready --timeout=300s pod -l app=nginxapp --namespace ${{ env.ENVIRONMENT }}

    - name: Get Pods
      run: |
        kubectl get pods -n ${{ env.ENVIRONMENT }}

    - name: Wait for LoadBalancer IP
      run: |
        echo "Waiting for LoadBalancer IP..."
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get svc nginxapp --namespace qa -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ "$EXTERNAL_IP" != "" ]; then
            echo "External IP found: $EXTERNAL_IP"
            break
          fi
          echo "Waiting for External IP..."
          sleep 10
        done
        if [ "$EXTERNAL_IP" == "" ]; then
          echo "Failed to retrieve External IP"
          exit 1
        fi
        echo "Service is accessible at http://$EXTERNAL_IP"

    - name: Test Service Availability
      run: |
        curl -v http://$EXTERNAL_IP
    
    # - name: Get services
    #   run: |
    #     kubectl get svc -n ${{ env.ENVIRONMENT }}
        
    # - name: Verify deployment
    #   run: |
    #     kubectl --namespace ${{ env.ENVIRONMENT }} port-forward service/nginxapp 8888:80